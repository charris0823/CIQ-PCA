// src/components/ContactTable.js
import React, { useEffect, useMemo, useRef, useState } from 'react';
import {
  TableContainer,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
  Tooltip,
  Box,
} from "@mui/material";
import { Link } from 'react-router-dom';
import {
  SentimentVeryDissatisfied as IconVeryBad,
  SentimentDissatisfied as IconBad,
  SentimentNeutral as IconNeutral,
  SentimentSatisfied as IconGood,
  SentimentVerySatisfied as IconVeryGood,
} from '@mui/icons-material';

/* --------- Column sizing config --------- */
const STORAGE_KEY = 'contactTableWidths_v2';

const DEFAULT_WIDTHS = {
  timestamp: 200,
  jobName:   300,
  status:    120,
  agent:     120,
  summary:   420,
  sentiment: 110,
};

const MIN_WIDTHS = {
  timestamp: 150,
  jobName:   160,
  status:    100,
  agent:     110,
  summary:   260,
  sentiment: 90,
};

const MAX_WIDTHS = {
  timestamp: 500,
  jobName:   800,
  status:    260,
  agent:     260,
  summary:   1000,
  sentiment: 220,
};

/* --------- Data helpers --------- */
const recordToDate = (row) => {
  const ts = row?.timestamp ?? row?.Timestamp ?? row?.createdAt ?? null;

  if (ts != null) {
    const s = String(ts).trim();
    if (/^\d+$/.test(s)) {
      const n = Number(s);
      const ms = s.length >= 13 ? n : n * 1000; // 13+ digits => ms, else seconds
      const d = new Date(ms);
      if (!isNaN(d)) return d;
    } else {
      const d = new Date(s);
      if (!isNaN(d)) return d;
    }
  }

  // fallback: parse from jobName pattern like TIME_YYYYMMDDTHHMMSSZ
  const name = row?.jobName ?? row?.JobName ?? "";
  const m = /TIME_(\d{8}T\d{6})Z/i.exec(name);
  if (m) {
    const t = m[1]; // YYYYMMDDTHHMMSS
    const iso = `${t.slice(0,4)}-${t.slice(4,6)}-${t.slice(6,8)}T${t.slice(9,11)}:${t.slice(11,13)}:${t.slice(13,15)}Z`;
    const d = new Date(iso);
    if (!isNaN(d)) return d;
  }
  return null;
};

const fmtDateTime = new Intl.DateTimeFormat(undefined, {
  dateStyle: "medium",
  timeStyle: "short",
});

// Prefer summary_summary, then other likely keys
const getGenSummary = (row) =>
  row?.summary_summary ??
  row?.summary ??
  row?.genSummary ??
  row?.genAiSummary ??
  row?.genaiSummary ??
  row?.contactSummary ??
  row?.ConversationAnalytics?.ContactSummary?.AutoGenerated?.OverallSummary?.Content ??
  "";

// sentiment extraction + normalize to [-5, 5]
const pickCustomerSentimentRaw = (row) => {
  const raw =
    row?.callerSentimentScore ??
    row?.callerSentimentChange ??
    row?.custSent ??
    row?.customerSentiment ??
    row?.sentiment?.customer ??
    row?.cust_sent ??
    null;

  if (raw == null || raw === "") return null;
  const v = typeof raw === "string" ? parseFloat(raw) : Number(raw);
  return Number.isNaN(v) ? null : v;
};

const normalizeToFive = (v) => {
  if (!Number.isFinite(v)) return null;
  return Math.max(-5, Math.min(5, Math.tanh(v) * 5));
};

const hslFromNorm = (norm) => {
  if (norm == null) return null;
  const t = (norm + 5) / 10;   // 0..1
  const hue = 0 + t * 120;     // red→green
  return `hsl(${hue} 70% 45%)`;
};

const iconFromNorm = (norm) => {
  if (norm == null) return null;
  if (norm <= -3) return <IconVeryBad fontSize="small" />;
  if (norm <= -1) return <IconBad fontSize="small" />;
  if (norm < 1)   return <IconNeutral fontSize="small" />;
  if (norm < 3)   return <IconGood fontSize="small" />;
  return <IconVeryGood fontSize="small" />;
};

/* --------- Column-resize hook (fixed) --------- */
function useResizableColumns() {
  const [widths, setWidths] = useState(() => {
    try {
      const saved = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}');
      return { ...DEFAULT_WIDTHS, ...saved };
    } catch {
      return { ...DEFAULT_WIDTHS };
    }
  });
  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(widths));
  }, [widths]);

  const dragRef = useRef(null);
  const [dragging, setDragging] = useState(false);

  useEffect(() => {
    if (!dragging) return;

    const onMove = (e) => {
      const drag = dragRef.current;
      if (!drag) return;
      const { key, startX, startW } = drag;
      const delta = e.clientX - startX;
      const next = Math.max(MIN_WIDTHS[key], Math.min(MAX_WIDTHS[key], startW + delta));
      setWidths((w) => ({ ...w, [key]: next }));
    };

    const onUp = () => {
      dragRef.current = null;
      setDragging(false);
    };

    window.addEventListener('mousemove', onMove);
    window.addEventListener('mouseup', onUp);
    document.body.style.userSelect = 'none';
    document.body.style.cursor = 'col-resize';

    return () => {
      window.removeEventListener('mousemove', onMove);
      window.removeEventListener('mouseup', onUp);
      document.body.style.userSelect = '';
      document.body.style.cursor = '';
    };
  }, [dragging]);

  const beginDrag = (key, startX) => {
    dragRef.current = { key, startX, startW: widths[key] ?? DEFAULT_WIDTHS[key] };
    setDragging(true);
  };

  const resetWidth = (key) => {
    setWidths((w) => ({ ...w, [key]: DEFAULT_WIDTHS[key] }));
  };

  return { widths, beginDrag, resetWidth };
}

/* --------- Header cell with resizer --------- */
function HeaderCell({ label, colKey, widths, beginDrag, resetWidth, align }) {
  return (
    <TableCell
      align={align}
      sx={{
        position: 'relative',
        width: widths[colKey],
        minWidth: MIN_WIDTHS[colKey],
        maxWidth: MAX_WIDTHS[colKey],
        whiteSpace: 'nowrap',
      }}
    >
      <Box sx={{ pr: 2, overflow: 'hidden', textOverflow: 'ellipsis' }}>{label}</Box>

      {/* Drag handle */}
      <Box
        onMouseDown={(e) => { e.preventDefault(); beginDrag(colKey, e.clientX); }}
        onDoubleClick={() => resetWidth(colKey)}
        sx={{
          position: 'absolute',
          top: 0,
          right: 0,
          height: '100%',
          width: 8,
          zIndex: 10,               // <-- ensure it captures pointer
          cursor: 'col-resize',
          '&:hover': { bgcolor: 'action.hover' },
        }}
        title="Drag to resize • Double-click to reset"
      />
    </TableCell>
  );
}

/* --------- Main table --------- */
function ContactTable({ rows }) {
  const { widths, beginDrag, resetWidth } = useResizableColumns();

  const minTableWidth = useMemo(
    () => Object.values(widths).reduce((a, b) => a + (b || 0), 0),
    [widths]
  );

  return (
    <TableContainer component={Paper} sx={{ overflowX: 'auto' }}>
      <Table aria-label="contact table" sx={{ tableLayout: 'fixed', minWidth: minTableWidth }}>
        <TableHead>
          <TableRow>
            <HeaderCell label="Timestamp" colKey="timestamp" widths={widths} beginDrag={beginDrag} resetWidth={resetWidth} />
            <HeaderCell label="Job Name" colKey="jobName" widths={widths} beginDrag={beginDrag} resetWidth={resetWidth} />
            <HeaderCell label="Status" colKey="status" widths={widths} beginDrag={beginDrag} resetWidth={resetWidth} />
            <HeaderCell label="Agent" colKey="agent" widths={widths} beginDrag={beginDrag} resetWidth={resetWidth} />
            <HeaderCell label="Summary" colKey="summary" widths={widths} beginDrag={beginDrag} resetWidth={resetWidth} />
            <HeaderCell label="Cust Sent" colKey="sentiment" widths={widths} beginDrag={beginDrag} resetWidth={resetWidth} align="right" />
          </TableRow>
        </TableHead>

        <TableBody>
          {rows.map((row) => {
            const dt = recordToDate(row);
            const human = dt ? fmtDateTime.format(dt) : "-";

            const summary = getGenSummary(row);
            const summaryShort =
              summary && summary.length > 110 ? summary.slice(0, 110).trim() + "…" : summary || "—";

            const rawSent = pickCustomerSentimentRaw(row);
            const normSent = normalizeToFive(rawSent);
            const bg = hslFromNorm(normSent);
            const icon = iconFromNorm(normSent);

            return (
              <TableRow key={row.key} hover>
                <TableCell
                  sx={{
                    width: widths.timestamp, minWidth: MIN_WIDTHS.timestamp, maxWidth: MAX_WIDTHS.timestamp,
                    whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis',
                  }}
                >
                  <Link to={`/dashboard/${row.key}`} title={String(row.timestamp ?? "")}>
                    {human}
                  </Link>
                </TableCell>

                <TableCell
                  title={row.jobName || ""}
                  sx={{
                    width: widths.jobName, minWidth: MIN_WIDTHS.jobName, maxWidth: MAX_WIDTHS.jobName,
                    whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis',
                  }}
                >
                  {row.jobName}
                </TableCell>

                <TableCell
                  sx={{
                    width: widths.status, minWidth: MIN_WIDTHS.status, maxWidth: MAX_WIDTHS.status,
                    whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis',
                  }}
                >
                  {row.status || "—"}
                </TableCell>

                <TableCell
                  sx={{
                    width: widths.agent, minWidth: MIN_WIDTHS.agent, maxWidth: MAX_WIDTHS.agent,
                    whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis',
                  }}
                >
                  {row.agent || "—"}
                </TableCell>

                <TableCell
                  sx={{
                    width: widths.summary, minWidth: MIN_WIDTHS.summary, maxWidth: MAX_WIDTHS.summary,
                    whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis',
                  }}
                >
                  <Tooltip title={summary || ""} placement="top" arrow disableHoverListener={!summary}>
                    <Box component="span">{summaryShort}</Box>
                  </Tooltip>
                </TableCell>

                <TableCell
                  align="right"
                  sx={{
                    width: widths.sentiment, minWidth: MIN_WIDTHS.sentiment, maxWidth: MAX_WIDTHS.sentiment,
                  }}
                >
                  {normSent == null ? (
                    "—"
                  ) : (
                    <Tooltip
                      title={`Raw: ${rawSent?.toFixed?.(3) ?? rawSent} • Normalized: ${normSent.toFixed(2)} / 5`}
                      placement="left"
                      arrow
                    >
                      <Box
                        role="img"
                        aria-label="customer sentiment"
                        sx={{
                          display: 'inline-flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          width: 36,
                          height: 24,
                          borderRadius: 999,
                          bgcolor: bg,
                          color: 'white',
                          backgroundImage:
                            `linear-gradient(180deg, rgba(255,255,255,0.14), rgba(0,0,0,0.08)), ${bg}`,
                          boxShadow: '0 0 0 1px rgba(0,0,0,0.06) inset',
                        }}
                      >
                        {icon}
                      </Box>
                    </Tooltip>
                  )}
                </TableCell>
              </TableRow>
            );
          })}
        </TableBody>
      </Table>
    </TableContainer>
  );
}

export default ContactTable;
